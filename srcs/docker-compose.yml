version: "3.3"
services:

  frontend:
    container_name: rp_nginx
    build:
      context: "./frontend"
      dockerfile: "Dockerfile"
      args:
        - HOST_ADDRESS=${HOST_ADDRESS}
        - USERMGR_PORT=${USERMGR_PORT}
        - AUTH_PORT=${AUTH_PORT}
        - GAME_PORT=${GAME_PORT}
        - CHAT_PORT=${CHAT_PORT}
    labels:
      - "traefik.http.routers.nginx.rule=Host(`${HOST_ADDRESS}`)"
      - "traefik.http.routers.nginx.entrypoints=web"
    networks:
      - rp_network

  db:
    image: "postgres:bookworm"
    container_name: rp_db
    user: "postgres"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - db_data:/var/lib/postgresql/data:rw
    expose:
      - "5432"
    networks:
      - rp_network
    restart: always

  user-management:
    container_name: rp_user_management
    build:
      context: "./user-management"
      dockerfile: "Dockerfile"
      args:
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_HOST=${DB_HOST}
        - DB_PORT=${DB_PORT}
        - SECRET_KEY=${SECRET_KEY}
        - CLIENT_ID=${CLIENT_ID}
        - CLIENT_SECRET=${SECRET_ID}
        - EMAIL_API_KEY=${EMAIL_API_KEY}
        - RP_EMAIL=${RP_EMAIL}
        - HOST_ADDRESS=${HOST_ADDRESS}
        - AUTH_PORT=${AUTH_PORT}
        - USERMGR_PORT=${USERMGR_PORT}
        - GAME_PORT=${GAME_PORT}
        - CHAT_PORT=${CHAT_PORT}
    volumes:
      - usermedia:/app/media:rw
    ports:
      - "8002:8002"
    networks:
      - rp_network
    depends_on:
      - db

  auth:
    container_name: rp_auth
    build:
      context: "./auth"
      dockerfile: "Dockerfile"
      args:
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_HOST=${DB_HOST}
        - DB_PORT=${DB_PORT}
        - SECRET_KEY=${SECRET_KEY}
        - CLIENT_ID=${CLIENT_ID}
        - CLIENT_SECRET=${SECRET_ID}
        - EMAIL_API_KEY=${EMAIL_API_KEY}
        - RP_EMAIL=${RP_EMAIL}
        - HOST_ADDRESS=${HOST_ADDRESS}
        - AUTH_PORT=${AUTH_PORT}
    ports:
      - "8001:8001"
    networks:
      - rp_network
    depends_on:
      - user-management

  game:
    container_name: rp_game
    build:
      context: "./game"
      dockerfile: "Dockerfile"
      args:
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_HOST=${DB_HOST}
        - DB_PORT=${DB_PORT}
        - SECRET_KEY=${SECRET_KEY}
        - CLIENT_ID=${CLIENT_ID}
        - CLIENT_SECRET=${CLIENT_ID}
        - EMAIL_API_KEY=${EMAIL_API_KEY}
        - RP_EMAIL=${RP_EMAIL}
        - HOST_ADDRESS=${HOST_ADDRESS}
        - AUTH_PORT=${AUTH_PORT}
        - USERMGR_PORT=${USERMGR_PORT}
        - GAME_PORT=${GAME_PORT}
    ports:
      - "8003:8003"
    networks:
      - rp_network
    depends_on:
      - user-management

  chat:
    container_name: rp_chat
    build:
      context: "./chat"
      dockerfile: "Dockerfile"
      args:
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_HOST=${DB_HOST}
        - DB_PORT=${DB_PORT}
        - SECRET_KEY=${SECRET_KEY}
        - CLIENT_ID=${CLIENT_ID}
        - CLIENT_SECRET=${CLIENT_ID}
        - EMAIL_API_KEY=${EMAIL_API_KEY}
        - RP_EMAIL=${RP_EMAIL}
        - HOST_ADDRESS=${HOST_ADDRESS}
        - AUTH_PORT=${AUTH_PORT}
        - USERMGR_PORT=${USERMGR_PORT}
        - GAME_PORT=${GAME_PORT}
        - CHAT_PORT=${CHAT_PORT}
    ports:
      - "8004:8004"
    networks:
      - rp_network
    depends_on:
      - user-management

  adminer:
    container_name: rp_adminer
    image: "adminer"
    ports:
      - "8020:8020"
    networks:
      - rp_network


networks:
  rp_network:
    driver: bridge

volumes:
  usermedia:
    driver: local
    driver_opts:
      type: none
      device: /home/ubuntu/data/media
      o: bind
  db_data:
    driver: local
    driver_opts:
      type: none
      device: /home/ubuntu/data/db
      o: bind
